{"version":3,"file":"index.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/config.ts","webpack:///./src/helpers/AiGameAgent.ts","webpack:///./src/helpers/Score.ts","webpack:///./src/index.ts","webpack:///./src/scenes/BootScene.ts","webpack:///./src/scenes/GameScene.ts","webpack:///./src/scenes/MenuScene.ts","webpack:///./src/scenes/PreloadScene.ts","webpack:///./src/sprites/Bird.ts","webpack:///./src/sprites/Groud.ts","webpack:///./src/sprites/Pipe.ts","webpack:///./src/sprites/Pipes.ts"],"sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"index\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"./src/index.ts\",\"vendors~index\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export const gameConfig = {\r\n    type: Phaser.AUTO,\r\n    parent: 'flappy-container',\r\n    width: 800,\r\n    height: 600,\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            debug: false\r\n        }\r\n    },\r\n    banner: false\r\n};\r\nexport const config = {\r\n    birdGravity: 500,\r\n    birdFlapPower: 200\r\n};\r\n","import * as tf from '@tensorflow/tfjs';\r\nexport default class AiGameAgent {\r\n    constructor(bird) {\r\n        this.bird = bird;\r\n    }\r\n    createModel() {\r\n        const NEURONS = 6;\r\n        const hiddenLayer = tf.layers.dense({\r\n            units: NEURONS,\r\n            inputShape: [2]\r\n        });\r\n        const outputLayer = tf.layers.dense({\r\n            units: 1,\r\n        });\r\n        this.birdModel = tf.sequential();\r\n        this.birdModel.add(hiddenLayer);\r\n        this.birdModel.add(outputLayer);\r\n        this.birdModel.compile({ loss: 'meanSquaredError', optimizer: 'sgd' });\r\n    }\r\n    predictResults(horizontalDistance, heightDistance) {\r\n        tf.tidy(() => {\r\n            var input = [horizontalDistance, heightDistance];\r\n            var inputTensor = tf.tensor2d([input]);\r\n            var outputs = this.birdModel.predict(inputTensor);\r\n            outputs.data().then(output => {\r\n                if (output > 0.5) {\r\n                    this.bird.jump();\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { GameObjects } from 'phaser';\r\nconst round = Math.round;\r\nexport default class Score extends GameObjects.BitmapText {\r\n    constructor(scene, x, y, font, text, size) {\r\n        super(scene, x, y, font, text, size);\r\n        this._score = 0;\r\n        this._score = 0;\r\n        this.setDepth(1);\r\n    }\r\n    addScore() {\r\n        let scene = this.scene;\r\n        ++this._score;\r\n        scene.scoreSound.play();\r\n        this.setText(this._score.toString());\r\n    }\r\n}\r\n","import { Game } from 'phaser';\r\nimport BootScene from './scenes/BootScene';\r\nimport PreloadScene from './scenes/PreloadScene';\r\nimport MenuScene from './scenes/MenuScene';\r\nimport GameScene from './scenes/GameScene';\r\nimport { gameConfig } from './config';\r\nclass App {\r\n    constructor() {\r\n        let game = new Game(gameConfig);\r\n        game.scene.add('Boot', BootScene, true);\r\n        game.scene.add('Preload', PreloadScene);\r\n        game.scene.add('Menu', MenuScene);\r\n        game.scene.add('Game', GameScene);\r\n    }\r\n}\r\nnew App();\r\n","import { Scene } from 'phaser';\r\nexport default class BootScene extends Scene {\r\n    constructor() {\r\n        super({ key: 'Boot' });\r\n    }\r\n    preload() {\r\n    }\r\n    create() {\r\n        this.scene.start('Preload');\r\n    }\r\n}\r\n","import { Scene } from 'phaser';\r\nimport Pipes from '../sprites/Pipes';\r\nimport Score from '../helpers/Score';\r\nimport Ground from '../sprites/Groud';\r\nimport Bird from '../sprites/Bird';\r\nimport GameAgent from '../helpers/AiGameAgent';\r\nvar generation = 0;\r\nexport default class GameScene extends Scene {\r\n    constructor() {\r\n        super({ key: 'Game' });\r\n        this.started = false;\r\n        this.currentTarget = 0;\r\n        this.changeTarget = true;\r\n    }\r\n    init() {\r\n        this.scoreSound = this.sound.add('score_sound');\r\n        this.hitPipeSound = this.sound.add('hit_pipe_sound');\r\n        this.hitGroudSound = this.sound.add('hit_ground_sound');\r\n        let config = this.sys.game.config;\r\n        this.width = config.width;\r\n        this.height = config.height;\r\n        this.halfWidth = this.width / 2;\r\n        this.halfHeight = this.height / 2;\r\n        let { width, height, halfWidth, halfHeight } = this;\r\n        this.background = this.add.tileSprite(halfWidth, halfHeight, width, height, 'background');\r\n        this.ground = new Ground(this, halfWidth, height - 56, width, 112, 'ground');\r\n        this.add.existing(this.ground);\r\n        this.bird = new Bird(this, 50, 150, 'bird');\r\n        this.physics.add.existing(this.bird, false);\r\n        this.add.existing(this.bird);\r\n        this.bird.anims.play('fly');\r\n        this.gameAgent = new GameAgent(this.bird);\r\n        this.gameAgent.createModel();\r\n        this.currentTarget = 0;\r\n        this.labelScore = new Score(this, 10, 10, 'flappyfont', '0', 36);\r\n        this.add.existing(this.labelScore);\r\n        this.labelGeneration = new Score(this, 300, 10, 'flappyfont', 'Generation: ' + generation, 36);\r\n        this.add.existing(this.labelGeneration);\r\n        this.startGame();\r\n    }\r\n    startGame() {\r\n        this.input.keyboard.on('keydown_SPACE', this.bird.jump, this.bird);\r\n        this.bird.setGrav();\r\n        this.pipes = new Pipes(this.physics.world, this.physics.world.scene, { allowGravity: false });\r\n        this.pipes.addRowOfPipes(this.height, 1);\r\n        this.pipeGeneratorLoop = this.time.addEvent({\r\n            delay: 3000,\r\n            callback: this.pipes.addRowOfPipes,\r\n            args: [this.height],\r\n            callbackScope: this.pipes,\r\n            loop: true\r\n        });\r\n        this.physics.add.existing(this.ground, true);\r\n        this.physics.add.collider(this.bird, this.ground, this.hitGroud, null, this);\r\n        this.physics.add.overlap(this.bird, this.pipes, this.hitPipe, null, this);\r\n        this.started = true;\r\n    }\r\n    update(time, delta) {\r\n        if (!this.started)\r\n            return;\r\n        if (this.background.active) {\r\n            this.background.tilePositionX -= 10 * delta / 1000;\r\n        }\r\n        if (this.ground.active) {\r\n            this.ground.updateGround(delta);\r\n        }\r\n        if (this.bird.active) {\r\n            this.bird.updateBird(this);\r\n        }\r\n        var hole = 0;\r\n        if (this.pipes.pipeGapsIndex.length == 6) {\r\n            this.pipes.nextTarget = this.pipes.getChildren()[this.currentTarget];\r\n            this.pipes.nextGapCordinates = hole = this.pipes.pipeGapsIndex[this.currentTarget];\r\n            this.currentTarget = 0;\r\n        }\r\n        else if (this.changeTarget && this.pipes.nextTarget && (this.pipes.nextTarget.x + 64 - 24) < this.bird.x) {\r\n            this.changeTarget = false;\r\n            this.currentTarget = this.currentTarget + 6;\r\n            this.pipes.nextTarget = this.pipes.getChildren()[this.currentTarget];\r\n            this.pipes.nextGapCordinates = hole = this.pipes.pipeGapsIndex[this.currentTarget];\r\n            var that = this;\r\n            setTimeout(function () { that.changeTarget = true; }, 500);\r\n        }\r\n        var horizontalDistance = this.pipes.nextTarget.x;\r\n        var heightDistance = this.bird.y - this.pipes.pipeGapsIndex[this.currentTarget];\r\n        this.gameAgent.predictResults(horizontalDistance, heightDistance);\r\n    }\r\n    gameOver() {\r\n        if (!this.started)\r\n            return;\r\n        this.labelGeneration.text = \"Generation: \" + (++generation);\r\n        var horizontalDistance = this.pipes.nextTarget.x;\r\n        var heightDistance = this.bird.y - this.pipes.nextGapCordinates;\r\n        var reward = parseInt(this.labelScore.text) + (this.bird.x - this.pipes.nextTarget.x);\r\n        this.bird.stopTween();\r\n        this.restartGame();\r\n    }\r\n    restartGame() {\r\n        this.scene.restart();\r\n    }\r\n    hitGroud() {\r\n        if (!this.started)\r\n            return;\r\n        this.hitGroudSound.play();\r\n        if (this.bird.active) {\r\n            this.offBirdJump();\r\n            this.stopGameObjects();\r\n        }\r\n        this.gameOver();\r\n    }\r\n    hitPipe() {\r\n        if (!this.bird.active)\r\n            return;\r\n        this.hitPipeSound.play();\r\n        this.offBirdJump();\r\n        this.stopGameObjects();\r\n        this.bird.headDroop();\r\n        this.gameOver();\r\n    }\r\n    stopGameObjects() {\r\n        this.background.setActive(false);\r\n        this.ground.setActive(false);\r\n        this.bird.setActive(false);\r\n        this.time.removeAllEvents();\r\n    }\r\n    offBirdJump() {\r\n        this.input.keyboard.off('keydown_SPACE', this.bird.jump, this.bird, false);\r\n    }\r\n}\r\n","import { Scene } from 'phaser';\r\nexport default class MenuScene extends Scene {\r\n    constructor() {\r\n        super({ key: 'Menu' });\r\n    }\r\n    create() {\r\n        let config = this.sys.game.config;\r\n        let width = config.width;\r\n        let height = config.height;\r\n        this.background = this.add.tileSprite(width / 2, height / 2, width, height, 'background');\r\n        this.ground = this.add.tileSprite(width / 2, height - 56, width, 112, 'ground');\r\n        let titleGroup = this.add.group();\r\n        let title = titleGroup.create(145, 100, 'title');\r\n        this.bird = titleGroup.create(257, 100, 'bird');\r\n        this.anims.create({\r\n            key: 'fly',\r\n            frames: this.anims.generateFrameNumbers('bird', { start: 0, end: 2 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        this.bird.anims.play('fly');\r\n        this.tweens.add({\r\n            targets: titleGroup.getChildren(),\r\n            y: '+=20',\r\n            duration: 1000,\r\n            yoyo: true,\r\n            repeat: Number.MAX_VALUE\r\n        });\r\n        this.scene.start('Game');\r\n    }\r\n    update(time, delta) {\r\n        this.background.tilePositionX -= 10 * delta / 1000;\r\n        this.ground.tilePositionX -= 100 * delta / 1000;\r\n    }\r\n}\r\n","import { Scene } from 'phaser';\r\nexport default class PreloadScene extends Scene {\r\n    constructor() {\r\n        super({ key: 'Preload' });\r\n    }\r\n    init() {\r\n        let config = this.sys.game.config;\r\n        let width = config.width;\r\n        let height = config.height;\r\n        let loadingPic = this.add.image(width / 2, height / 2, 'loading');\r\n        loadingPic.setSize(0, 19);\r\n        this.load.on('progress', (value) => {\r\n            loadingPic.setSize(value * 220, 19);\r\n        });\r\n    }\r\n    preload() {\r\n        let image = this.load.image.bind(this.load);\r\n        let spritesheet = this.load.spritesheet.bind(this.load);\r\n        let audio = this.load.audio.bind(this.load);\r\n        this.load.setPath('src/assets/images/');\r\n        image('background', 'background1.png');\r\n        image('ground', 'ground.png');\r\n        image('pipe', 'pipe.png');\r\n        spritesheet('bird', 'bird.png', { frameWidth: 34, frameHeight: 24, endFrame: 2 });\r\n        this.load.setPath('src/assets/fonts/');\r\n        this.load.bitmapFont('flappyfont', 'flappyfont.png', 'flappyfont.xml');\r\n        this.load.setPath('src/assets/audio/');\r\n        audio('fly_sound', 'flap.wav');\r\n        audio('score_sound', 'score.wav');\r\n        audio('hit_pipe_sound', 'pipehit.wav');\r\n        audio('hit_ground_sound', 'ouch.wav');\r\n    }\r\n    create() {\r\n        this.scene.start('Menu');\r\n    }\r\n}\r\n","import { Physics } from 'phaser';\r\nimport { config } from '../config';\r\nexport default class Bird extends Physics.Arcade.Sprite {\r\n    constructor(scene, x, y, textureKey) {\r\n        super(scene, x, y, textureKey);\r\n        this.flySound = scene.sound.add('fly_sound');\r\n        this.setDepth(1);\r\n    }\r\n    updateBird(scene) {\r\n        if (this.active === false)\r\n            return;\r\n        if (this.y > 200 && this.angle < 20) {\r\n            this.angle += 1;\r\n        }\r\n        if (this.y < 0) {\r\n            scene.hitPipe();\r\n        }\r\n    }\r\n    jump() {\r\n        let { birdFlapPower } = config;\r\n        let flapPower = 0 - birdFlapPower;\r\n        this.setVelocityY(flapPower);\r\n        if (this.angle > -20) {\r\n            this.stopTween();\r\n            this.tween = this.scene.tweens.add({\r\n                targets: this,\r\n                angle: '-= 20',\r\n                duration: 100\r\n            });\r\n        }\r\n        this.flySound.play();\r\n    }\r\n    headDroop() {\r\n        this.stopTween();\r\n        this.tween = this.scene.tweens.add({\r\n            targets: this,\r\n            duration: 500,\r\n            angle: 70\r\n        });\r\n    }\r\n    stopTween() {\r\n        if (this.tween) {\r\n            this.tween.stop();\r\n            this.tween = null;\r\n        }\r\n    }\r\n    setGrav() {\r\n        let { birdGravity } = config;\r\n        this.body.gravity.y = birdGravity;\r\n    }\r\n}\r\n","import { GameObjects } from 'phaser';\r\nexport default class Ground extends GameObjects.TileSprite {\r\n    constructor(scene, x, y, width, height, texture) {\r\n        super(scene, x, y, width, height, texture);\r\n        this.setDepth(1);\r\n    }\r\n    updateGround(delta) {\r\n        this.tilePositionX -= 100 * delta / 1000;\r\n    }\r\n}\r\n","import { GameObjects } from 'phaser';\r\nexport default class Pipe extends GameObjects.Sprite {\r\n    constructor(scene, x, y, key, frame) {\r\n        super(scene, x, y, key, frame);\r\n        this.bird = scene.bird;\r\n        this.score = scene.labelScore;\r\n        this.frameNum = frame;\r\n        if (frame === 0) {\r\n            this.scoreAdded = false;\r\n        }\r\n    }\r\n    preUpdate() {\r\n        let x = this.x;\r\n        if (this.y > 50) {\r\n            return;\r\n        }\r\n        if (x < -54) {\r\n            this.scoreAdded = false;\r\n        }\r\n        else if (!this.scoreAdded && this.frameNum == 0 && x + 28 + 17 < this.bird.x) {\r\n            this.score.addScore();\r\n            this.scoreAdded = true;\r\n        }\r\n    }\r\n    setSpeed() {\r\n        let pipeBody = this.body;\r\n        pipeBody.setVelocityX(-100);\r\n    }\r\n}\r\n","import { Physics } from 'phaser';\r\nimport Pipe from './Pipe';\r\nexport default class Pipes extends Physics.Arcade.Group {\r\n    constructor(world, scene, config) {\r\n        super(world, scene, config);\r\n        this.pipeGapsIndex = [];\r\n    }\r\n    addOnePipe(x, y) {\r\n        let pipe = new Pipe(this.scene, x, y, 'pipe', 0);\r\n        this.add(pipe, true);\r\n        pipe.setSpeed();\r\n    }\r\n    addRowOfPipes(h, startingPoint = 1) {\r\n        var tilesNeeded = Math.ceil((h - 113) / 64);\r\n        var min = 2;\r\n        var max = tilesNeeded - 2;\r\n        var hole = Math.floor(Math.random() * (max - min + 1) + min);\r\n        for (var i = 1; i < tilesNeeded + 1; i++) {\r\n            if (i != hole && i != hole + 1) {\r\n                this.pipeGapsIndex.push(64 * hole);\r\n                this.addOnePipe(this.scene.cameras.main.width / startingPoint, (i * 64) - 30);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappingstJA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACfhIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}